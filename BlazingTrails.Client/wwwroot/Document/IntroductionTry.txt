WebAssembly(Wasm) nedir?
Basit bir makine modeli ve kapsamlı bir spesifikasyona sahip çalıştırılabilir bir formattır.

Blazor barındırma modelleri?
Server-side: Sunucu taraflı barındırma Eylül 2019 da yayınlandı
WebAssembly: Mayıs 2020 de yayınlandı.

Blazor WebAssembly:
Artıları:
1.Web Derlemesi, istemcide, tarayıcının içinde çalışır, böylece statik dosyalar olarak dağıtılabilir. Buna rağmen, Blazor Wasm uygulamaları, tarayıcı güvenlik kısıtlamaları nedeniyle doğrudan yerel dosya sisteminden çalışmayacaktır.
2.Blazor Wasm çevrimdışı çalışabilir. Sunucuyla ağ bağlantısı kesildiğinde, istemci uygulaması çalışmaya devam edebilir (belli ki yeni verileri almak için sunucuyla konuşamaz).
3.Aynı zamanda bir Progressive(Aşamalı) Web Uygulaması olarak da oldukça kolay bir şekilde çalışabilir , bu da müşterinin uygulamamızı cihazlarına yüklemeyi seçebileceği ve herhangi bir ağ erişimi olmadan istediği zaman çalıştırabileceği anlamına gelir.
4.İstemcinin makinesinde çalışan kodla, sunucu yükünün önemli ölçüde azaldığı anlamına gelir.
  
Eksileri:
1.Dosya olarak blazor.webassembly.js, istemci uygulamasını önyükler. Gerekli tüm .NET DLL derlemelerini indirir, bu da uygulamanın başlangıç süresini, uygulamanız ilk çalıştırıldığında sunucu tarafında olduğundan daha yavaş yapar (DLL'ler daha sonra tarayıcı tarafından önbelleğe alınır ve sonraki başlatma sürelerini çok daha hızlı hale getirir).

Server-Side:
Artıları:
1.Blazor sunucu tarafı, HTML içeriğini istemcinin tarayıcısına gönderilmeden önce önceden işler. Bu onu arama motoru dostu yapar ve algılanabilir bir başlatma süresi yoktur.
2.Blazor sunucu tarafı uygulamaları, Web Derlemesi için herhangi bir gereksinim olmadığından, yalnızca HTML ve JavaScript olduğundan daha eski tarayıcılarda (Internet Explorer 11 gibi) çalışır. Kod sunucu üzerinde yürütülürken, Visual Studio'da .NET kodumuzun hatalarını ayıklamak da mümkündür.

Eksileri:
Blazor sunucu tarafı, geçerli istemci için bir bellek içi oturum kurar ve sunucuda çalışan .NET ile istemcinin tarayıcısı arasında iletişim kurmak için SignalR'ı kullanır. Tüm bellek ve CPU kullanımı, tüm kullanıcılar için sunucuya bir maliyet getirir. Ayrıca, istemcinin kendisine ilk hizmet veren sunucuya bağlı olduğu ve dolayısıyla yük dengeleme ile çalışmadığı anlamına gelir.
İlk sayfa oluşturulup tarayıcıya gönderildikten sonra, blazor.server.jsdosya, kullanıcı ile sunucu arasında aracılık yapabilmesi için tarayıcıdaki ilgili kullanıcı etkileşimi olaylarına bağlanır. Örneğin, işlenen bir öğenin @onclickkayıtlı bir olayı varsa blazor.server.js, JavaScript onclickolayına bağlanır ve ardından bu olayı sunucuya göndermek ve ilgili .NET kodunu yürütmek için SignalR bağlantısını kullanır. .NET kodu tamamlandıktan sonra, Blazor sayfadaki bileşenleri yeniden oluşturacak ve ardından tüm sayfayı yeniden yüklemek zorunda kalmadan görüntüsünü güncelleyebilmesi için istemcinin tarayıcısına bir delta HTML paketi gönderecektir.
                                                                                                                                                                                                                                                                                                                                                                                                                               

