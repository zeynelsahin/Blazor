@page "/AddTrail"
@using BlazingTrails.Shared.Features.ManageTrails.Shared
@inherits AddTrailPageBase

<MudBreadcrumbs Items="@Items"></MudBreadcrumbs>
<MudForm Model="@Trail" @ref="@form" Validation="@(TrailValidator.ValidateValue)" ValidationDelay="0">
    <FormSection Title="Basic Details"
                 HelpText="This information is used to identity the trail and can be searched to help hikerns find it">
        <MudTextField @bind-Value="Trail.Name"
                      For="@(() => Trail.Name)"
                      Immediate="true"
                      Label="Name"/>

        <MudTextField @bind-Value="Trail.Description"
                      For="@(() => Trail.Description)"
                      Immediate="true"
                      Label="Description" Lines="6"/>

        <MudTextField @bind-Value="Trail.Location"
                      For="@(() => Trail.Location)"
                      Immediate="true"
                      Label="Location"/>
        <MudItem Class="pt-8">
            @if (Image != null)
            {
                <MudText Class="pb-4" Typo="@Typo.h6">Image : @Image.Name</MudText>
            }
            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png"/>
            <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Icons.Filled.Image"
                    Label="Load picture"
                    for="fileInput"/>

        </MudItem>
    </FormSection>
    <FormSection Title="Difficulty"
                 HelpText="This information is used to identity the trail and can be searched to help hikerns find it">
        <MudTextField @bind-Value="Trail.Length"
                      For="@(() => Trail.Length)"
                      Immediate="true"
                      Label="Lenght"/>
        <InputTime Validator="TrailValidator" Trail="@Trail"></InputTime>
    </FormSection>
    <FormSection Title="Route Instructions"
                 HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">

        @{ var i = 0; }
        @foreach (var routeInstruction in Trail.Route)
        {
            i++;
            routeInstruction.Stage = i;
            <MudForm Model="@routeInstruction" Validation="@(RouteInstructionValidator.ValidateValue)" ValidationDelay="0">

                <MudGrid>
                    <MudItem xs="2" lg="1">
                        <MudTextField @bind-Value="@routeInstruction.Stage" For="@(() => routeInstruction.Stage)" Label="Stage" ReadOnly="true" Variant="Variant.Text"/>
                    </MudItem>
                    <MudItem xs="8" lg="10">
                        <MudTextField @bind-Value="@routeInstruction.Description"
                                      For="@(() => @routeInstruction.Description)"
                                      Immediate="true"
                                      Label="Description">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="2" lg="1">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Large" OnClick="() => Trail.Route.Remove(routeInstruction)" aria-label="delete"></MudIconButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }

        <MudCardActions>
            <MudButton OnClick="() => Trail.Route.Add(new TrailDto.RouteInstruction())" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Add Instuction</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="@(async () => await Submit())">Add Trail</MudButton>
        </MudCardActions>
    </FormSection>
</MudForm>